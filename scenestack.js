var gdjs;(function(i){const o=new i.Logger("Scene stack"),c=new i.Logger("Multiplayer - Debug");class r{constructor(t){this._stack=[];this._wasFirstSceneLoaded=!1;this._isNextLayoutLoading=!1;this._sceneStackSyncDataToApply=null;if(!t)throw"SceneStack must be constructed with a gdjs.RuntimeGame.";this._runtimeGame=t}onGameResolutionResized(){for(let t=0;t<this._stack.length;++t)this._stack[t].onGameResolutionResized()}step(t){if(this._isNextLayoutLoading||this._stack.length===0)return!1;const n=this._stack[this._stack.length-1];if(n.renderAndStep(t)){const e=n.getRequestedChange();if(e===i.SceneChangeRequest.STOP_GAME)return this._runtimeGame.getRenderer().stopGame(),!0;e===i.SceneChangeRequest.POP_SCENE?this.pop():e===i.SceneChangeRequest.PUSH_SCENE?this.push(n.getRequestedScene()):e===i.SceneChangeRequest.REPLACE_SCENE?this.replace(n.getRequestedScene()):e===i.SceneChangeRequest.CLEAR_SCENES?this.replace(n.getRequestedScene(),!0):o.error("Unrecognized change in scene stack: "+e)}return this.applyUpdateFromNetworkSyncDataIfAny(),!0}renderWithoutStep(){return this._stack.length===0?!1:(this._stack[this._stack.length-1].render(),!0)}pop(t=1){let n=!1;for(let e=0;e<t&&!(this._stack.length<=1);++e){n=!0;const s=this._stack.pop();if(!s)return;s.unloadScene()}if(n){const e=this._stack[this._stack.length-1];e&&e.onResume()}}push(t,n){const e=this._stack[this._stack.length-1];return e&&e.onPause(),this._runtimeGame.areSceneAssetsReady(t)?this._loadNewScene(t,n):(this._isNextLayoutLoading=!0,this._runtimeGame.loadSceneAssets(t).then(()=>{this._loadNewScene(t),this._isNextLayoutLoading=!1}),null)}_loadNewScene(t,n){const e=new i.RuntimeScene(this._runtimeGame);if(e.loadFromScene(this._runtimeGame.getSceneAndExtensionsData(t)),this._wasFirstSceneLoaded=!0,n){const s=this._runtimeGame.getExternalLayoutData(n);s&&e.createObjectsFrom(s.instances,0,0,0,!0)}return this._stack.push(e),e}replace(t,n){if(n)for(;this._stack.length!==0;){let e=this._stack.pop();e&&e.unloadScene()}else if(this._stack.length!==0){let e=this._stack.pop();e&&e.unloadScene()}return this.push(t)}getCurrentScene(){return this._stack.length===0?null:this._stack[this._stack.length-1]}wasFirstSceneLoaded(){return this._wasFirstSceneLoaded}getNetworkSyncData(t){const n=t.playerNumber;if(n!==void 0&&n!==1)return null;const e=[];for(let s=0;s<this._stack.length;++s){const a=this._stack[s];e.push({name:a.getName(),networkId:a.getOrCreateNetworkId()})}return e}updateFromNetworkSyncData(t){this._sceneStackSyncDataToApply=t}applyUpdateFromNetworkSyncDataIfAny(){const t=this._sceneStackSyncDataToApply;if(!!t){this._sceneStackSyncDataToApply=null;for(let n=0;n<t.length;++n){const e=t[n],s=this._stack[n];if(!s){c.info(`Scene at position ${n} with name ${e.name} is missing from the stack, adding it.`);const a=this.push(e.name);a&&(a.networkId=e.networkId);continue}if(s.getName()!==e.name){c.info(`Scene at position ${n} and name ${s.getName()} is not the same as the expected ${e.name}, replacing.`);const a=this.replace(e.name,!0);a&&(a.networkId=e.networkId);continue}if(!s.networkId&&e.networkId&&e.name===s.getName()){c.info(`Scene at position ${n} and name ${s.getName()} has no networkId, let's assume it's the right one and reconcile it with the id ${e.networkId}.`),s.networkId=e.networkId;continue}if(s.networkId!==e.networkId){c.info(`Scene at position ${n} and name ${s.getName()} has a different networkId ${s.networkId} than the expected ${e.networkId}, replacing.`);const a=this.replace(e.name,!1);a&&(a.networkId=e.networkId);continue}}if(this._stack.length>t.length){const n=this._stack.length-t.length;this.pop(n)}}}}i.SceneStack=r})(gdjs||(gdjs={}));
//# sourceMappingURL=scenestack.js.map
