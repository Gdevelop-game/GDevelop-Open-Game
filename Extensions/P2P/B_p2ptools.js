var gdjs;(function(d){let S;(function(E){let y;(function(n){const C=e=>typeof e=="object"&&e!==null&&typeof e.eventName=="string"&&typeof e.data=="string";class P{constructor(t,o){this.data="";this.sender="";this.data=t,this.sender=o}}n.EventData=P;class N{constructor(){this.data=[];this.dataloss=!1}isTriggered(){return this.data.length>0}pushData(t){this.dataloss&&this.data.length>0?this.data[0]=t:this.data.push(t)}popData(){this.data.shift()}getData(){return this.data.length===0?"":this.data[0].data}getSender(){return this.data.length===0?"":this.data[0].sender}}n.Event=N;let u=null,s={debug:1},r=null;const a=new Map,f=new Map;let b=!1,v=!1,m="";const i=[],c=[],h=()=>{r===null&&(u!==null?r=new Peer(u,s):r=new Peer(s),r.on("open",()=>{b=!0}),r.on("error",e=>{v=!0,m=e.message}),r.on("connection",e=>{e.on("open",()=>{D(e),c.push(e.peer)})}),r.on("close",()=>{r=null,h()}),r.on("disconnected",r.reconnect))},D=e=>{a.set(e.peer,e),e.on("data",t=>{C(t)&&n.getEvent(t.eventName).pushData(new P(t.data,e.peer))}),e.on("error",()=>{x(e.peer)}),e.on("close",()=>{x(e.peer)}),function t(){e.peerConnection&&(e.peerConnection.connectionState==="failed"||e.peerConnection.connectionState==="disconnected"||e.peerConnection.connectionState==="closed")?x(e.peer):setTimeout(t,1e3)}()},x=e=>{!a.has(e)||(i.push(e),a.delete(e))};n.getEvent=e=>{let t=f.get(e);return t||f.set(e,t=new N),t},n.connect=e=>{if(r===null)return;const t=r.connect(e);t.on("open",()=>{D(t)})},n.disconnectFromPeer=e=>{const t=a.get(e);t&&t.close()},n.disconnectFromAllPeers=()=>{for(const e of a.values())e.close()},n.disconnectFromAll=()=>{r&&(r.destroy(),r=null)},n.disconnectFromBroker=()=>{r&&(r.disconnect(),r=null)},n.onEvent=(e,t)=>{const o=n.getEvent(e);return o.dataloss=t,o.isTriggered()},n.sendDataTo=(e,t,o)=>{const l=a.get(e);l&&l.send({eventName:t,data:o})},n.sendDataToAll=(e,t)=>{for(const o of a.values())o.send({eventName:e,data:t})},n.sendVariableTo=(e,t,o)=>{n.sendDataTo(e,t,JSON.stringify(o.toJSObject()))},n.sendVariableToAll=(e,t)=>{n.sendDataToAll(e,JSON.stringify(t.toJSObject()))},n.getEventData=e=>n.getEvent(e).getData(),n.getEventSender=e=>n.getEvent(e).getSender(),n.getEventVariable=(e,t)=>{t.fromJSON(n.getEventData(e))},n.useCustomBrokerServer=(e,t,o,l,I)=>{Object.assign(s,{host:e,port:t,path:o,secure:I,key:l.length===0?"peerjs":l}),h()},n.useDefaultBrokerServer=h,n.useCustomICECandidate=(e,t,o)=>{s.config=s.config||{},s.config.iceServers=s.config.iceServers||[],s.config.iceServers.push({urls:e,username:t,credential:o})},n.forceUseRelayServer=e=>{s.config=s.config||{},s.config.iceTransportPolicy=e?"relay":"all"},n.overrideId=e=>{u=e},n.getCurrentId=()=>r==null?"":r.id||"",n.isReady=()=>b,n.onError=()=>{const e=v;return v=!1,e},n.getLastError=()=>m,n.onDisconnect=()=>i.length>0,n.getDisconnectedPeer=()=>i[0]||"",n.onConnection=()=>c.length>0,n.getConnectedPeer=()=>c[0]||"",n.getConnectionInstance=e=>a.get(e),d.callbacksRuntimeScenePostEvents.push(()=>{for(const e of f.values())e.popData();i.length>0&&i.shift(),c.length>0&&c.shift()})})(y=E.p2p||(E.p2p={}))})(S=d.evtTools||(d.evtTools={}))})(gdjs||(gdjs={}));
//# sourceMappingURL=B_p2ptools.js.map
